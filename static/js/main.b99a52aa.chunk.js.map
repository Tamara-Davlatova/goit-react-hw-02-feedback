{"version":3,"sources":["Components/FeeedbackOptions/FeedbackOptions.js","Components/Section/Section.js","Components/Notification/Notification.js","Components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js","Components/FeeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","onLeaveFeedback","type","name","className","s","btn","onClick","Section","title","children","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","state","handleBtnIncrement","e","setState","prevState","target","Object","values","this","reduce","acc","value","Math","round","countTotalFeedback","countPositiveFeedbackPercentage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+QAGe,SAASA,EAAT,GAA+C,IAApBC,EAAmB,EAAnBA,gBACxC,OACE,qCACE,wBACEC,KAAK,SACLC,KAAK,OACLC,UAAWC,IAAEC,IACbC,QAASN,EAJX,kBAQA,wBACEC,KAAK,SACLC,KAAK,UACLC,UAAWC,IAAEC,IACbC,QAASN,EAJX,qBAQA,wBACEC,KAAK,SACLC,KAAK,MACLC,UAAWC,IAAEC,IACbC,QAASN,EAJX,oBCpBS,SAASO,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,6BAAKD,IACJC,KCJQ,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICAE,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,qCACE,4CACCD,EAAQ,EACP,+BACE,wCAAWH,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,UAGF,cAACP,EAAD,CAAcC,QAAQ,yB,IC4BfO,E,4MA5CbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,mBAAqB,SAAAC,GACnB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAEG,OAAOtB,KAAOqB,EAAUF,EAAEG,OAAOtB,MAAQ,O,mEAK9C,OAAOuB,OAAOC,OAAOC,KAAKR,OAAOS,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,K,wDAIrE,OAAOC,KAAKC,MAAOL,KAAKR,MAAMN,KAAOc,KAAKM,qBAAwB,O,+BAG1D,IAAD,EACwBN,KAAKR,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,mCACE,eAACR,EAAD,CAASC,MAAM,wBAAf,UACE,cAACT,EAAD,CAAiBC,gBAAiB2B,KAAKP,qBAEvC,cAACR,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,KAAKM,qBACZhB,mBACEU,KAAKO,kCAAoC,EACrCP,KAAKO,kCACL,a,GApCAC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,gC","file":"static/js/main.b99a52aa.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nexport default function FeedbackOptions({ onLeaveFeedback }) {\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        name=\"good\"\r\n        className={s.btn}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        Good\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        name=\"neutral\"\r\n        className={s.btn}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        Neutral\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        name=\"bad\"\r\n        className={s.btn}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        Bad\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport Notification from '../Notification/Notification';\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <>\r\n      <h2>Statistics</h2>\r\n      {total > 0 ? (\r\n        <ul>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import { Component } from 'react';\nimport FeedbackOptions from './Components/FeeedbackOptions/FeedbackOptions';\nimport Section from './Components/Section/Section';\nimport Statistics from './Components/Statistics/Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleBtnIncrement = e => {\n    this.setState(prevState => ({\n      [e.target.name]: prevState[e.target.name] + 1,\n    }));\n  };\n\n  countTotalFeedback() {\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  }\n\n  countPositiveFeedbackPercentage() {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.handleBtnIncrement} />\n\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={\n              this.countPositiveFeedbackPercentage() > 0\n                ? this.countPositiveFeedbackPercentage()\n                : 0\n            }\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__1d4ta\"};"],"sourceRoot":""}